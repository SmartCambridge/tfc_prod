######################################################################
###################### /tfc_web  ##################################
######################################################################

# The analysed Pocket Smartpanel logfile, for /smartpanel/pocketlog/

    location /smartpanel/pocketlog/pocketlog.csv {
        # Redirect to https
        if ($do_redirect = YY) {
          return 301 https://$host$request_uri;
        }
        types {
            text/csv csv;
        }
        alias /var/log/tfc_prod/pocket_log/pocket_log.csv;
    }

# Serve the archived files for the download API that are stored in
# /media/tfc/download_api/ from URLs http[s]://...../api/download_files.

# These are protected using Django authentication via Nginx's auth_request
# module. This uses a call to /api/nginx-auth-probe/ (implimented
# in tfc_web/api/views.ps) to check the user is authenicated, If not,
# the error_page entry redirects them to /api/login-and-agree
# (also in tfc_web/api/views.ps) which will prompt them to login
# and/or agree to the TaCs before sending them backto the URL they
# wanted in the first place. The '@' in '@error403' makes this a 'named
# location' which isn't used for regular request processing.

    location /api/download_files {
        # Redirect to https
        if ($do_redirect = YY) {
          return 301 https://$host$request_uri;
        }
        alias /media/tfc/download_api/;
	auth_request /api/nginx-auth-probe/;
        error_page 403 = @error403;
	autoindex on;
    }
    location @error403 {
        return 302 https://$host/api/login-and-agree/?next=https://$host$request_uri;
    }

    location / {

        # Redirect to https
        if ($do_redirect = YY) {
          return 301 https://$host$request_uri;
        }

        proxy_pass http://localhost:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
